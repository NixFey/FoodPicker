@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using FoodPicker.Web.Enums
@using Microsoft.Extensions.Configuration
@inject SignInManager<ApplicationUser> _signInManager
@inject UserManager<ApplicationUser> _userManager
@inject IAuthorizationService _authorizationService;
@inject IConfiguration _configuration;

<ul class="navbar-nav">
    @if (_signInManager.IsSignedIn(User) && User.Identity != null)
    {
        @if (User.IsInRole("Admin"))
        {
            <li class="nav-item" style="display: flex; align-items: center;">
                <span class="badge bg-primary">
                @if ((await _authorizationService.AuthorizeAsync(User, AuthorizationPolicies.AccessInternalAdminAreas)).Succeeded)
                {
                    <text>Internal Admin Mode</text>
                }
                else
                {
                    <text>User Mode</text>
                }
                </span>
            </li>
        }
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity.Name!</a>
        </li>
        @if (_configuration["ClaimsInHeaders"] != "True")
        {
            <li class="nav-item">
                <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new {area = ""})">
                    <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
                </form>
            </li>
        }
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Auth" asp-action="Login">Login</a>
        </li>
    }
</ul>